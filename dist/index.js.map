{
  "version": 3,
  "sources": ["../lib/full_igamma_prefix.js", "../lib/regularized_gamma_prefix.js", "../lib/beta_small_b_large_a_series.js", "../lib/rising_factorial_ratio.js", "../lib/ibeta_power_terms.js", "../lib/ibeta_fraction2.js", "../lib/binomial_ccdf.js", "../lib/ibeta_a_step.js", "../lib/ibeta_series.js", "../lib/assign.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar MAX_LN = require( '@stdlib/constants-float64-max-ln' );\nvar MIN_LN = require( '@stdlib/constants-float64-min-ln' );\n\n\n// MAIN //\n\n/**\n* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.\n*\n* @private\n* @param {number} a - function parameter\n* @param {number} z - function parameter\n* @returns {number} power term prefix\n*/\nfunction fullIGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar alz;\n\n\talz = a * ln( z );\n\tif ( z >= 1.0 ) {\n\t\tif ( ( alz < MAX_LN ) && ( -z > MIN_LN ) ) {\n\t\t\tprefix = pow( z, a ) * exp( -z );\n\t\t}\n\t\telse if ( a >= 1.0 ) {\n\t\t\tprefix = pow( z / exp(z/a), a );\n\t\t}\n\t\telse {\n\t\t\tprefix = exp( alz - z );\n\t\t}\n\t}\n\telse if ( alz > MIN_LN ) {\n\t\tprefix = pow( z, a ) * exp( -z );\n\t}\n\telse if ( z/a < MAX_LN ) {\n\t\tprefix = pow( z / exp(z/a), a );\n\t}\n\telse {\n\t\tprefix = exp( alz - z );\n\t}\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fullIGammaPrefix;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006-7, 2013-14.\n* Copyright Paul A. Bristow 2007, 2013-14.\n* Copyright Nikhar Agrawal 2013-14.\n* Copyright Christopher Kormanyos 2013-14.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lanczosSumExpGScaled = require( '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled' );\nvar gammaln = require( '@stdlib/math-base-special-gammaln' );\nvar gamma = require( '@stdlib/math-base-special-gamma' );\nvar log1p = require( '@stdlib/math-base-special-log1p' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar max = require( '@stdlib/math-base-special-max' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar MAX_LN = require( '@stdlib/constants-float64-max-ln' );\nvar MIN_LN = require( '@stdlib/constants-float64-min-ln' );\nvar G = require( '@stdlib/constants-float64-gamma-lanczos-g' );\nvar E = require( '@stdlib/constants-float64-e' );\n\n\n// MAIN //\n\n/**\n* Computes `(z^a)*(e^-z) / gamma(a)`.\n*\n* @private\n* @param {number} a - input value\n* @param {number} z - input value\n* @returns {number} function value\n*/\nfunction regularizedGammaPrefix( a, z ) {\n\tvar prefix;\n\tvar amza;\n\tvar agh;\n\tvar alz;\n\tvar amz;\n\tvar sq;\n\tvar d;\n\n\tagh = a + G - 0.5;\n\td = ( (z - a) - G + 0.5 ) / agh;\n\tif ( a < 1.0 ) {\n\t\t// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:\n\t\tif ( z <= MIN_LN ) {\n\t\t\t// Use logs, so should be free of cancellation errors:\n\t\t\treturn exp( ( a * ln(z) ) - z - gammaln( a ) );\n\t\t}\n\t\t// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:\n\t\treturn pow( z, a ) * exp( -z ) / gamma( a );\n\t}\n\tif ( abs(d*d*a) <= 100.0 && a > 150.0 ) {\n\t\t// Special case for large a and a ~ z:\n\t\tprefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );\n\t\tprefix = exp( prefix );\n\t}\n\telse {\n\t\t// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:\n\t\talz = a * ln(z / agh);\n\t\tamz = a - z;\n\t\tif (\n\t\t\tmin(alz, amz) <= MIN_LN ||\n\t\t\tmax(alz, amz) >= MAX_LN\n\t\t) {\n\t\t\tamza = amz / a;\n\t\t\tif (\n\t\t\t\tmin(alz, amz)/2.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/2.0 < MAX_LN\n\t\t\t) {\n\t\t\t\t// Compute square root of the result and then square it:\n\t\t\t\tsq = pow( z/agh, a/2.0 ) * exp( amz/2.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tmin(alz, amz)/4.0 > MIN_LN &&\n\t\t\t\tmax(alz, amz)/4.0 < MAX_LN &&\n\t\t\t\tz > a\n\t\t\t) {\n\t\t\t\t// Compute the 4th root of the result then square it twice:\n\t\t\t\tsq = pow( z/agh, a/4.0 ) * exp( amz/4.0 );\n\t\t\t\tprefix = sq * sq;\n\t\t\t\tprefix *= prefix;\n\t\t\t}\n\t\t\telse if (\n\t\t\t\tamza > MIN_LN &&\n\t\t\t\tamza < MAX_LN\n\t\t\t) {\n\t\t\t\tprefix = pow( (z * exp(amza)) / agh, a );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprefix = exp( alz + amz );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprefix = pow( z/agh, a ) * exp( amz );\n\t\t}\n\t}\n\tprefix *= sqrt( agh/E ) / lanczosSumExpGScaled( a );\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nmodule.exports = regularizedGammaPrefix;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gammaDeltaRatio = require( '@stdlib/math-base-special-gamma-delta-ratio' );\nvar factorial = require( '@stdlib/math-base-special-factorial' );\nvar gammainc = require( '@stdlib/math-base-special-gammainc' );\nvar log1p = require( '@stdlib/math-base-special-log1p' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar MIN_VALUE = require( '@stdlib/constants-float64-smallest-normal' );\nvar EPSILON = require( '@stdlib/constants-float64-eps' );\nvar fullIGammaPrefix = require( './full_igamma_prefix.js' );\nvar regularizedGammaPrefix = require( './regularized_gamma_prefix.js' );\n\n\n// VARIABLES //\n\nvar p = new Array( 30 );\n\n\n// MAIN //\n\n/**\n* This is DiDonato and Morris's BGRAT routine, see Eq's 9 through 9.6.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {NonNegativeInteger} s0 - initial value\n* @param {number} mult - initial value\n* @param {boolean} normalized - boolean indicating whether to evaluate the regularized or non-regularized incomplete beta function\n* @returns {number} function value\n*/\nfunction betaSmallBLargeASeries( a, b, x, y, s0, mult, normalized ) {\n\tvar prefix;\n\tvar tmp1;\n\tvar tnp1;\n\tvar sum;\n\tvar b2n;\n\tvar bm1;\n\tvar lx2;\n\tvar lxp;\n\tvar mbn;\n\tvar lx;\n\tvar t4;\n\tvar h;\n\tvar j;\n\tvar m;\n\tvar n;\n\tvar r;\n\tvar t;\n\tvar u;\n\n\t// Some values we'll need later, these are Eq 9.1:\n\tbm1 = b - 1.0;\n\tt = a + ( bm1 / 2.0 );\n\tif ( y < 0.35 ) {\n\t\tlx = log1p( -y );\n\t} else {\n\t\tlx = ln( x );\n\t}\n\tu = -t * lx;\n\n\t// And from from 9.2:\n\th = regularizedGammaPrefix( b, u );\n\tif ( h <= MIN_VALUE ) {\n\t\treturn s0;\n\t}\n\tif ( normalized ) {\n\t\tprefix = h / gammaDeltaRatio( a, b );\n\t\tprefix /= pow( t, b );\n\t} else {\n\t\tprefix = fullIGammaPrefix( b, u ) / pow( t, b );\n\t}\n\tprefix *= mult;\n\n\t// We need the quantity Pn. Unfortunately, this is computed recursively and requires a full history of all the previous values. No choice but to declare a big table and hope it's big enough...\n\tp[ 0 ] = 1;  // see 9.3.\n\n\t// Now an initial value for J, see 9.6: gammainc( u, b, regularized, upper )\n\tj = gammainc( u, b, true, true );\n\tj /= h;\n\n\t// Now we can start to pull things together and evaluate the sum in Eq 9:\n\tsum = s0 + ( prefix * j ); // Value at N = 0\n\n\t// Some variables we'll need...\n\ttnp1 = 1.0; // 2*N+1\n\tlx2 = lx / 2.0;\n\tlx2 *= lx2;\n\tlxp = 1.0;\n\tt4 = 4.0 * t * t;\n\tb2n = b;\n\tfor ( n = 1; n < p.length; ++n ) {\n\t\t// Begin by evaluating the next Pn from Eq 9.4:\n\t\ttnp1 += 2.0;\n\t\tp[ n ] = 0.0;\n\t\tmbn = b - n;\n\t\ttmp1 = 3;\n\t\tfor ( m = 1; m < n; ++m ) {\n\t\t\tmbn = ( m * b ) - n;\n\t\t\tp[ n ] += mbn * p[ n-m ] / factorial( tmp1 );\n\t\t\ttmp1 += 2;\n\t\t}\n\t\tp[ n ] /= n;\n\t\tp[ n ] += bm1 / factorial( tnp1 );\n\n\t\t// Now we want Jn from Jn-1 using Eq 9.6:\n\t\tj = ( ( b2n * ( b2n+1.0 ) * j ) + ( ( u+b2n+1.0 ) * lxp ) ) / t4;\n\t\tlxp *= lx2;\n\t\tb2n += 2.0;\n\n\t\t// Pull it together with Eq 9:\n\t\tr = prefix * p[ n ] * j;\n\t\tsum += r;\n\t\tif ( r > 1.0 ) {\n\t\t\tif ( abs( r ) < abs( EPSILON * sum ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if ( abs( r / EPSILON ) < abs( sum ) ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nmodule.exports = betaSmallBLargeASeries;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the delta in `beta(a,b,x) = prefix + delta * beta(a+k,b,x)`.\n*\n* ## Notes\n*\n* Specifically, the function calculates\n*\n* ```tex\n* \\frac{ (a)(a+1)(a+2)...(a+k-1) }{ (b)(b+1)(b+2)...(b+k-1) }\n* ```\n*\n* The function should only called with small `k`; for large `k`, it is grossly inefficient.\n*\n* @private\n* @param {number} a - input value\n* @param {number} b - input value\n* @param {NonNegativeInteger} k - input value\n* @returns {number} ratio value\n*/\nfunction risingFactorialRatio( a, b, k ) {\n\tvar result;\n\tvar i;\n\tif ( k === 0 ) {\n\t\treturn 1.0;\n\t}\n\tresult = 1.0;\n\tfor ( i = 0; i < k; i++ ) {\n\t\tresult *= ( a + i ) / ( b + i );\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nmodule.exports = risingFactorialRatio;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lanczosSumExpGScaled = require( '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled' );\nvar maxabs = require( '@stdlib/math-base-special-maxabs' );\nvar minabs = require( '@stdlib/math-base-special-minabs' );\nvar expm1 = require( '@stdlib/math-base-special-expm1' );\nvar log1p = require( '@stdlib/math-base-special-log1p' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar MAX_LN = require( '@stdlib/constants-float64-max-ln' );\nvar MIN_LN = require( '@stdlib/constants-float64-min-ln' );\nvar G = require( '@stdlib/constants-float64-gamma-lanczos-g' );\nvar E = require( '@stdlib/constants-float64-e' );\n\n\n// MAIN //\n\n/**\n* Computes the leading power terms in the incomplete beta function.\n*\n* When normalized,\n*\n* ```tex\n* \\frac{ x^a y^b }{ \\operatorname{Beta}(a,b) }\n* ```\n*\n* and otherwise\n*\n* ```tex\n* x^a y^b\n* ```\n*\n* ## Notes\n*\n* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\\\( a \\\\) and \\\\( b \\\\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.\n*\n* -   For \\\\( l1 * l2 > 0 \\\\) or \\\\( \\operatorname{min}( a, b ) < 1 \\\\), the two power terms both go in the same direction (toward zero or toward infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out. In this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.\n*\n* -   If \\\\( \\max( \\abs(l1), \\abs(l2) ) < 0.5 \\\\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:\n*\n*     ```tex\n*     (1 + l_1)^a \\cdot (1 + l_2)^b \\\\\n*     = ((1 + l_1) \\cdot (1 + l_2)^(b/a))^a \\\\\n*     = (1 + l_1 + l_3 + l_1*l_3)^a\n*     ```\n*\n*     and\n*\n*     ```tex\n*     l_3 = (1 + l_2)^(b/a) - 1 \\\\\n*     = \\exp((b/a) * \\ln(1 + l_2)) - 1\n*     ```\n*\n*     The tricky bit is deciding which term to move inside. By preference, we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @returns {number} power terms\n*/\nfunction ibetaPowerTerms( a, b, x, y, normalized ) {\n\tvar result;\n\tvar smallA;\n\tvar ratio;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar l1;\n\tvar l2;\n\tvar l3;\n\tvar p1;\n\tvar b1;\n\tvar b2;\n\tvar c;\n\tvar l;\n\n\tif ( !normalized ) {\n\t\t// Can we do better here?\n\t\treturn pow( x, a ) * pow( y, b );\n\t}\n\tc = a + b;\n\n\t// Combine power terms with Lanczos approximation:\n\tagh = a + G - 0.5;\n\tbgh = b + G - 0.5;\n\tcgh = c + G - 0.5;\n\tresult = lanczosSumExpGScaled( c );\n\tresult /= lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b );\n\n\t// Combine with the leftover terms from the Lanczos approximation:\n\tresult *= sqrt( bgh / E );\n\tresult *= sqrt( agh / cgh );\n\n\t// `l1` and `l2` are the base of the exponents minus one:\n\tl1 = ( ( x * b ) - ( y * agh ) ) / agh;\n\tl2 = ( ( y * a ) - ( x * bgh ) ) / bgh;\n\tif ( minabs( l1, l2 ) < 0.2 ) {\n\t\t// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:\n\t\tif ( l1 * l2 > 0 || min( a, b ) < 1 ) {\n\t\t\tif ( abs(l1) < 0.1 ) {\n\t\t\t\tresult *= exp( a * log1p( l1 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow( ( x*cgh ) / agh, a );\n\t\t\t}\n\t\t\tif ( abs(l2) < 0.1 ) {\n\t\t\t\tresult *= exp( b * log1p( l2 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow((y * cgh) / bgh, b);\n\t\t\t}\n\t\t}\n\t\telse if ( maxabs( l1, l2 ) < 0.5 ) {\n\t\t\tsmallA = a < b;\n\t\t\tratio = b / a;\n\t\t\tif (\n\t\t\t\t(smallA && (ratio * l2 < 0.1)) ||\n\t\t\t\t(!smallA && (l1 / ratio > 0.1))\n\t\t\t) {\n\t\t\t\tl3 = expm1( ratio * log1p( l2 ) );\n\t\t\t\tl3 = l1 + l3 + ( l3 * l1 );\n\t\t\t\tl3 = a * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tl3 = expm1( log1p( l1 ) / ratio );\n\t\t\t\tl3 = l2 + l3 + ( l3 * l2 );\n\t\t\t\tl3 = b * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t}\n\t\telse if ( abs(l1) < abs(l2) ) {\n\t\t\t// First base near 1 only:\n\t\t\tl = ( a * log1p( l1 ) ) + ( b * ln( ( y*cgh ) / bgh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Second base near 1 only:\n\t\t\tl = ( b * log1p( l2 ) ) + ( a * ln( (x*cgh) / agh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\t// General case:\n\t\tb1 = (x * cgh) / agh;\n\t\tb2 = (y * cgh) / bgh;\n\t\tl1 = a * ln(b1);\n\t\tl2 = b * ln(b2);\n\t\tif (\n\t\t\tl1 >= MAX_LN ||\n\t\t\tl1 <= MIN_LN ||\n\t\t\tl2 >= MAX_LN ||\n\t\t\tl2 <= MIN_LN\n\t\t) {\n\t\t\t// Oops, under/overflow, sidestep if we can:\n\t\t\tif ( a < b ) {\n\t\t\t\tp1 = pow( b2, b / a );\n\t\t\t\tl3 = a * ( ln(b1) + ln(p1) );\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b1, a );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln(result);\n\t\t\t\t\tif ( l2 >= MAX_LN ) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp1 = pow( b1, a / b );\n\t\t\t\tl3 = ( ln(p1) + ln(b2) ) * b;\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b2, b );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln( result );\n\t\t\t\t\tif (l2 >= MAX_LN) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Finally the normal case:\n\t\t\tresult *= pow( b1, a ) * pow( b2, b );\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ibetaPowerTerms;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar continuedFraction = require( '@stdlib/math-base-tools-continued-fraction' );\nvar ibetaPowerTerms = require( './ibeta_power_terms.js' );\n\n\n// VARIABLES //\n\nvar OPTS = {\n\t'keep': true,\n\t'maxIter': 1000\n};\n\n\n// FUNCTIONS //\n\n/**\n* Continued fraction for the incomplete beta.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @returns {Function} series function\n*/\nfunction ibetaFraction2t( a, b, x, y ) {\n\tvar m = 0;\n\treturn next;\n\n\t/**\n\t* Calculate the numerator and denominator of the next term of the series.\n\t*\n\t* @private\n\t* @returns {Array} series expansion terms\n\t*/\n\tfunction next() {\n\t\tvar denom;\n\t\tvar aN;\n\t\tvar bN;\n\n\t\taN = (a + m - 1) * (a + b + m - 1) * m * (b - m) * x * x;\n\t\tdenom = a + ( 2.0*m ) - 1.0;\n\t\taN /= denom * denom;\n\t\tbN = m;\n\t\tbN += (m * (b - m) * x) / ( a + ( 2.0*m ) - 1.0 );\n\t\tbN += ( (a+m) * ( (a*y) - (b*x) + 1.0 + ( m*(2.0-x) ) ) ) / ( a + (2.0*m) + 1.0 ); // eslint-disable-line max-len\n\t\tm += 1;\n\t\treturn [ aN, bN ];\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta via the continued fraction representation.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element\n* @returns {number} incomplete beta value\n*/\nfunction ibetaFraction2( a, b, x, y, normalized, out ) {\n\tvar result;\n\tvar fract;\n\tvar f;\n\n\tresult = ibetaPowerTerms( a, b, x, y, normalized );\n\tif ( out ) {\n\t\tout[ 1 ] = result;\n\t}\n\tif ( result === 0.0 ) {\n\t\treturn result;\n\t}\n\tf = ibetaFraction2t( a, b, x, y );\n\tfract = continuedFraction( f, OPTS );\n\treturn result / fract;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ibetaFraction2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binomcoef = require( '@stdlib/math-base-special-binomcoef' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar MIN_VALUE = require( '@stdlib/constants-float64-smallest-normal' );\n\n\n// MAIN //\n\n/**\n* For integer arguments we can relate the incomplete beta to the complement of the binomial distribution cdf and use this finite sum.\n*\n* @private\n* @param {NonNegativeInteger} n - number of trials\n* @param {NonNegativeInteger} k - function input\n* @param {Probability} x - function input\n* @param {Probability} y - probability equal to `1-x`\n* @returns {number} sum\n*/\nfunction binomialCCDF( n, k, x, y ) {\n\tvar startTerm;\n\tvar result;\n\tvar start;\n\tvar term;\n\tvar i;\n\n\tresult = pow( x, n );\n\tif ( result > MIN_VALUE ) {\n\t\tterm = result;\n\t\tfor ( i = floor( n - 1 ); i > k; i-- ) {\n\t\t\tterm *= ((i + 1) * y) / ((n - i) * x);\n\t\t\tresult += term;\n\t\t}\n\t} else {\n\t\t// First term underflows so we need to start at the mode of the distribution and work outwards:\n\t\tstart = floor( n * x );\n\t\tif ( start <= k + 1 ) {\n\t\t\tstart = floor( k + 2 );\n\t\t}\n\t\tresult = pow( x, start ) * pow( y, n - start );\n\t\tresult *= binomcoef( floor(n), floor(start) );\n\t\tif ( result === 0.0 ) {\n\t\t\t// OK, starting slightly above the mode didn't work, we'll have to sum the terms the old fashioned way:\n\t\t\tfor ( i = start - 1; i > k; i-- ) {\n\t\t\t\tresult += pow( x, i ) * pow( y, n - i );\n\t\t\t\tresult *= binomcoef( floor(n), floor(i) );\n\t\t\t}\n\t\t} else {\n\t\t\tterm = result;\n\t\t\tstartTerm = result;\n\t\t\tfor ( i = start - 1; i > k; i-- ) {\n\t\t\t\tterm *= ((i + 1) * y) / ((n - i) * x);\n\t\t\t\tresult += term;\n\t\t\t}\n\t\t\tterm = startTerm;\n\t\t\tfor ( i = start + 1; i <= n; i++ ) {\n\t\t\t\tterm *= (n - i + 1) * x / (i * y);\n\t\t\t\tresult += term;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nmodule.exports = binomialCCDF;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ibetaPowerTerms = require( './ibeta_power_terms.js' );\n\n\n// MAIN //\n\n/**\n* Computes the difference between `ibeta(a,b,x)` and `ibeta(a+k,b,x)`.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {NonNegativeInteger} k - function input\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element\n* @returns {number} difference between ibeta(a,b,x) and ibeta(a+k,b,x)\n*/\nfunction ibetaAStep( a, b, x, y, k, normalized, out ) {\n\tvar prefix;\n\tvar term;\n\tvar sum;\n\tvar i;\n\n\tprefix = ibetaPowerTerms( a, b, x, y, normalized );\n\tif ( out ) {\n\t\tout[ 1 ] = prefix;\n\t}\n\tprefix /= a;\n\tif ( prefix === 0.0 ) {\n\t\treturn prefix;\n\t}\n\tsum = 1.0;\n\tterm = 1.0;\n\n\t// Series summation from 0 to k-1:\n\tfor ( i = 0; i < k-1; ++i ) {\n\t\tterm *= (a+b+i) * x / (a+i+1.0);\n\t\tsum += term;\n\t}\n\tprefix *= sum;\n\treturn prefix;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ibetaAStep;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lanczosSumExpGScaled = require( '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled' );\nvar sumSeries = require( '@stdlib/math-base-tools-sum-series' );\nvar log1p = require( '@stdlib/math-base-special-log1p' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar MIN_VALUE = require( '@stdlib/constants-float64-smallest-normal' );\nvar MAX_LN = require( '@stdlib/constants-float64-max-ln' );\nvar MIN_LN = require( '@stdlib/constants-float64-min-ln' );\nvar G = require( '@stdlib/constants-float64-gamma-lanczos-g' );\nvar E = require( '@stdlib/constants-float64-e' );\n\n\n// VARIABLES //\n\nvar opts = {\n\t'maxTerms': 100\n};\n\n\n// FUNCTIONS //\n\n/**\n* Series approximation to the incomplete beta.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {number} result - initial result value\n* @returns {Function} series function\n*/\nfunction ibetaSeriesT( a, b, x, result ) {\n\tvar poch = 1.0 - b;\n\tvar n = 1;\n\treturn next;\n\n\t/**\n\t* Calculate the next term of the series.\n\t*\n\t* @private\n\t* @returns {number} series expansion term\n\t*/\n\tfunction next() {\n\t\tvar r = result / a;\n\t\ta += 1.0;\n\t\tresult *= poch * x / n;\n\t\tn += 1;\n\t\tpoch += 1.0;\n\t\treturn r;\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Incomplete beta series.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {NonNegativeInteger} s0 - initial value\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element\n* @param {Probability} y - probability equal to `1-x`\n* @returns {number} function value\n*/\nfunction ibetaSeries( a, b, x, s0, normalized, out, y ) {\n\tvar result;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar l1;\n\tvar l2;\n\tvar c;\n\tvar s;\n\n\tif ( normalized ) {\n\t\tc = a + b;\n\n\t\t// Incomplete beta power term, combined with the Lanczos approximation:\n\t\tagh = a + G - 0.5;\n\t\tbgh = b + G - 0.5;\n\t\tcgh = c + G - 0.5;\n\t\tresult = lanczosSumExpGScaled( c ) / ( lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b ) ); // eslint-disable-line max-len\n\n\t\tl1 = ln( cgh / bgh ) * ( b - 0.5 );\n\t\tl2 = ln( x * cgh / agh ) * a;\n\n\t\t// Check for over/underflow in the power terms:\n\t\tif (\n\t\t\tl1 > MIN_LN &&\n\t\t\tl1 < MAX_LN &&\n\t\t\tl2 > MIN_LN &&\n\t\t\tl2 < MAX_LN\n\t\t) {\n\t\t\tif ( a * b < bgh * 10.0 ) {\n\t\t\t\tresult *= exp( ( b-0.5 ) * log1p( a / bgh ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow( cgh / bgh, b - 0.5 );\n\t\t\t}\n\t\t\tresult *= pow( x * cgh / agh, a );\n\t\t\tresult *= sqrt( agh / E );\n\n\t\t\tif ( out ) {\n\t\t\t\tout[ 1 ] = result * pow( y, b );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// We need logs, and this *will* cancel:\n\t\t\tresult = ln( result ) + l1 + l2 + ( ( ln( agh ) - 1.0 ) / 2.0 );\n\t\t\tif ( out ) {\n\t\t\t\tout[ 1 ] = exp( result + ( b * ln( y ) ) );\n\t\t\t}\n\t\t\tresult = exp( result );\n\t\t}\n\t}\n\telse {\n\t\t// Non-normalized, just compute the power:\n\t\tresult = pow( x, a );\n\t}\n\tif ( result < MIN_VALUE ) {\n\t\treturn s0; // Safeguard: series can't cope with denorms.\n\t}\n\ts = ibetaSeriesT( a, b, x, result );\n\topts.initialValue = s0;\n\treturn sumSeries( s, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ibetaSeries;\n", "/* eslint-disable max-statements, max-lines */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n* (C) Copyright Paul A. Bristow 2007.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar expm1 = require( '@stdlib/math-base-special-expm1' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar log1p = require( '@stdlib/math-base-special-log1p' );\nvar asin = require( '@stdlib/math-base-special-asin' );\nvar beta = require( '@stdlib/math-base-special-beta' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar max = require( '@stdlib/math-base-special-max' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar MAX_FLOAT64 = require( '@stdlib/constants-float64-max' );\nvar MIN_FLOAT64 = require( '@stdlib/constants-float64-smallest-normal' );\nvar MAX_INT32 = require( '@stdlib/constants-int32-max' );\nvar HALF_PI = require( '@stdlib/constants-float64-half-pi' );\nvar PI = require( '@stdlib/constants-float64-pi' );\nvar betaSmallBLargeASeries = require( './beta_small_b_large_a_series.js' );\nvar risingFactorialRatio = require( './rising_factorial_ratio.js' );\nvar ibetaPowerTerms = require( './ibeta_power_terms.js' );\nvar ibetaFraction2 = require( './ibeta_fraction2.js' );\nvar binomialCCDF = require( './binomial_ccdf.js' );\nvar ibetaAStep = require( './ibeta_a_step.js' );\nvar ibetaSeries = require( './ibeta_series.js' );\n\n\n// VARIABLES //\n\nvar ONE_OVER_PI = 1.0 / PI;\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta function and its first derivative and assigns results to a provided output array.\n*\n* ## Notes\n*\n* -   This function divides up the input range and selects the right implementation method for each domain.\n*\n* @param {Probability} x - function input\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {boolean} regularized - boolean indicating if the function should evaluate the regularized boolean beta function\n* @param {boolean} upper - boolean indicating if the function should return the upper tail of the incomplete beta function instead\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {(Array|TypedArray|Object)} function value and first derivative\n*\n* @example\n* var out = ibetaImp( 0.5, 2.0, 2.0, false, false, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~0.083, ~1.5 ]\n*\n* @example\n* var out = ibetaImp( 0.2, 1.0, 2.0, false, true, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 0.32, 1.6 ]\n*\n* @example\n* var out = ibetaImp( 0.2, 1.0, 2.0, true, true, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 0.64, 1.6 ]\n*/\nfunction ibetaImp( x, a, b, regularized, upper, out, stride, offset ) {\n\tvar lambda;\n\tvar prefix;\n\tvar fract;\n\tvar bbar;\n\tvar div;\n\tvar tmp;\n\tvar i0;\n\tvar i1;\n\tvar k;\n\tvar n;\n\tvar p;\n\tvar y;\n\n\ty = 1.0 - x;\n\ti0 = offset;\n\ti1 = offset + stride;\n\n\t// Derivative not set...\n\tout[ i1 ] = -1;\n\tif ( isnan( x ) || x < 0.0 || x > 1.0 ) {\n\t\tout[ i0 ] = NaN;\n\t\tout[ i1 ] = NaN;\n\t\treturn out;\n\t}\n\tif ( regularized ) {\n\t\tif ( a < 0.0 || b < 0.0 ) {\n\t\t\tout[ i0 ] = NaN;\n\t\t\tout[ i1 ] = NaN;\n\t\t\treturn out;\n\t\t}\n\t\t// Extend to a few very special cases...\n\t\tif ( a === 0.0 ) {\n\t\t\tif ( b === 0.0 ) {\n\t\t\t\tout[ i0 ] = NaN;\n\t\t\t\tout[ i1 ] = NaN;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\tif ( b > 0.0 ) {\n\t\t\t\tout[ i0 ] = ( upper ) ? 0.0 : 1.0;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t} else if ( b === 0.0 ) {\n\t\t\tif ( a > 0.0 ) {\n\t\t\t\tout[ i0 ] = ( upper ) ? 1.0 : 0.0;\n\t\t\t\treturn out;\n\t\t\t}\n\t\t}\n\t} else if ( a <= 0.0 || b <= 0.0 ) {\n\t\tout[ i0 ] = NaN;\n\t\tout[ i1 ] = NaN;\n\t\treturn out;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( a === 1.0 ) {\n\t\t\tout[ i1 ] = 1.0;\n\t\t} else {\n\t\t\tout[ i1 ] = ( a < 1.0 ) ? MAX_FLOAT64 / 2.0 : MIN_FLOAT64 * 2.0;\n\t\t}\n\t\tif ( upper ) {\n\t\t\tout[ i0 ] = ( regularized ) ? 1.0 : beta( a, b );\n\t\t\treturn out;\n\t\t}\n\t\tout[ i0 ] = 0.0;\n\t\treturn out;\n\t}\n\tif ( x === 1.0 ) {\n\t\tif ( b === 1.0 ) {\n\t\t\tout[ i1 ] = 1.0;\n\t\t} else {\n\t\t\tout[ i1 ] = ( b < 1.0 ) ? MAX_FLOAT64 / 2.0 : MIN_FLOAT64 * 2.0;\n\t\t}\n\t\tif ( upper ) {\n\t\t\tout[ i0 ] = 0.0;\n\t\t} else {\n\t\t\tout[ i0 ] = ( regularized ) ? 1.0 : beta( a, b );\n\t\t}\n\t\treturn out;\n\t}\n\tif ( a === 0.5 && b === 0.5 ) {\n\t\tout[ i1 ] = ONE_OVER_PI * sqrt( y * x );\n\n\t\t// We have an arcsine distribution:\n\t\tp = ( upper ) ? asin( sqrt(y) ) : asin( sqrt(x) );\n\t\tp /= HALF_PI;\n\t\tif ( !regularized ) {\n\t\t\tp *= PI;\n\t\t}\n\t\tout[ i0 ] = p;\n\t\treturn out;\n\t}\n\tif ( a === 1.0 ) {\n\t\ttmp = b;\n\t\tb = a;\n\t\ta = tmp;\n\n\t\ttmp = y;\n\t\ty = x;\n\t\tx = tmp;\n\n\t\tupper = !upper;\n\t}\n\tif ( b === 1.0 ) {\n\t\t// Special case see: http://functions.wolfram.com/GammaBetaErf/BetaRegularized/03/01/01/\n\t\tif ( a === 1.0 ) {\n\t\t\tout[ i0 ] = ( upper ) ? y : x;\n\t\t\tout[ i1 ] = 1.0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ i1 ] = a * pow( x, a - 1.0 );\n\t\tif ( y < 0.5 ) {\n\t\t\tp = ( upper ) ? -expm1( a * log1p(-y) ) : exp( a * log1p(-y) );\n\t\t} else {\n\t\t\tp = ( upper ) ? -( pow( x, a ) - 1.0 ) : pow( x, a );\n\t\t}\n\t\tif ( !regularized ) {\n\t\t\tp /= a;\n\t\t}\n\t\tout[ i0 ] = p;\n\t\treturn out;\n\t}\n\tif ( min( a, b ) <= 1.0 ) {\n\t\tif ( x > 0.5 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = y;\n\t\t\ty = x;\n\t\t\tx = tmp;\n\n\t\t\tupper = !upper;\n\t\t}\n\t\tif ( max( a, b ) <= 1.0 ) {\n\t\t\t// Both a,b < 1:\n\t\t\tif ( (a >= min( 0.2, b ) ) || ( pow(x, a) <= 0.9 ) ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t\t} else {\n\t\t\t\t\tfract = ibetaSeries( a, b, x, 0, regularized, out, y );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttmp = b;\n\t\t\t\tb = a;\n\t\t\t\ta = tmp;\n\n\t\t\t\ttmp = y;\n\t\t\t\ty = x;\n\t\t\t\tx = tmp;\n\n\t\t\t\tupper = !upper;\n\t\t\t\tif ( y >= 0.3 ) {\n\t\t\t\t\tif ( upper ) {\n\t\t\t\t\t\tfract = -( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\t\tupper = false;\n\t\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y ); // eslint-disable-line max-len\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfract = ibetaSeries( a, b, x, 0, regularized, out, y );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Sidestep on a, and then use the series representation:\n\t\t\t\t\tif ( regularized ) {\n\t\t\t\t\t\tprefix = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprefix = risingFactorialRatio( a + b, a, 20 );\n\t\t\t\t\t}\n\t\t\t\t\tfract = ibetaAStep( a, b, x, y, 20, regularized, out );\n\t\t\t\t\tif ( upper ) {\n\t\t\t\t\t\tfract -= ( ( regularized ) ? 1 : beta( a, b ) );\n\t\t\t\t\t\tupper = false;\n\t\t\t\t\t\tfract = -betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfract = betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( b <= 1.0 || ( x < 0.1 && ( pow( b * x, a ) <= 0.7 ) ) ) {\n\t\t\tif ( upper ) {\n\t\t\t\tfract = -( ( regularized ) ? 1 : beta( a, b ) );\n\t\t\t\tupper = false;\n\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t} else {\n\t\t\t\tfract = ibetaSeries( a, b, x, 0.0, regularized, out, y );\n\t\t\t}\n\t\t} else {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = y;\n\t\t\ty = x;\n\t\t\tx = tmp;\n\t\t\tupper = !upper;\n\n\t\t\tif ( y >= 0.3 ) {\n\t\t\t\tif (upper) {\n\t\t\t\t\tfract = -(( regularized ) ? 1.0 : beta( a, b ));\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t\t} else {\n\t\t\t\t\tfract = ibetaSeries( a, b, x, 0.0, regularized, out, y );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( a >= 15.0 ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -(( regularized ) ? 1.0 : beta( a, b ));\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -betaSmallBLargeASeries( a, b, x, y, fract, 1.0, regularized ); // eslint-disable-line max-len\n\t\t\t\t} else {\n\t\t\t\t\tfract = betaSmallBLargeASeries( a, b, x, y, 0.0, 1.0, regularized ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( regularized ) {\n\t\t\t\t\tprefix = 1;\n\t\t\t\t} else {\n\t\t\t\t\t// Sidestep to improve errors:\n\t\t\t\t\tprefix = risingFactorialRatio( a + b, a, 20.0 );\n\t\t\t\t}\n\t\t\t\tfract = ibetaAStep( a, b, x, y, 20.0, regularized, out );\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract -= ( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t} else {\n\t\t\t\t\tfract = betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Both a,b >= 1:\n\t\tif ( a < b ) {\n\t\t\tlambda = a - ( (a + b) * x );\n\t\t} else {\n\t\t\tlambda = ( (a + b) * y ) - b;\n\t\t}\n\t\tif ( lambda < 0.0 ) {\n\t\t\ttmp = b;\n\t\t\tb = a;\n\t\t\ta = tmp;\n\n\t\t\ttmp = y;\n\t\t\ty = x;\n\t\t\tx = tmp;\n\t\t\tupper = !upper;\n\t\t}\n\t\tif ( b < 40.0 ) {\n\t\t\tif (\n\t\t\t\tfloor(a) === a &&\n\t\t\t\tfloor(b) === b &&\n\t\t\t\ta < MAX_INT32 - 100\n\t\t\t) {\n\t\t\t\t// Relate to the binomial distribution and use a finite sum:\n\t\t\t\tk = a - 1.0;\n\t\t\t\tn = b + k;\n\t\t\t\tfract = binomialCCDF( n, k, x, y );\n\t\t\t\tif ( !regularized ) {\n\t\t\t\t\tfract *= beta( a, b );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( b * x <= 0.7 ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -( ( regularized ) ? 1.0 : beta( a, b ) );\n\t\t\t\t\tupper = false;\n\t\t\t\t\tfract = -ibetaSeries( a, b, x, fract, regularized, out, y );\n\t\t\t\t} else {\n\t\t\t\t\tfract = ibetaSeries( a, b, x, 0.0, regularized, out, y );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( a > 15.0 ) {\n\t\t\t\t// Sidestep so we can use the series representation:\n\t\t\t\tn = floor( b );\n\t\t\t\tif ( n === b ) {\n\t\t\t\t\tn -= 1;\n\t\t\t\t}\n\t\t\t\tbbar = b - n;\n\t\t\t\tif ( regularized ) {\n\t\t\t\t\tprefix = 1;\n\t\t\t\t} else {\n\t\t\t\t\tprefix = risingFactorialRatio( a + bbar, bbar, n );\n\t\t\t\t}\n\t\t\t\tfract = ibetaAStep( bbar, a, y, x, n, regularized );\n\t\t\t\tfract = betaSmallBLargeASeries( a, bbar, x, y, fract, 1.0, regularized ); // eslint-disable-line max-len\n\t\t\t\tfract /= prefix;\n\t\t\t}\n\t\t\telse if ( regularized ) {\n\t\t\t\tn = floor( b );\n\t\t\t\tbbar = b - n;\n\t\t\t\tif ( bbar <= 0 ) {\n\t\t\t\t\tn -= 1;\n\t\t\t\t\tbbar += 1;\n\t\t\t\t}\n\t\t\t\tfract = ibetaAStep( bbar, a, y, x, n, regularized );\n\t\t\t\tfract += ibetaAStep( a, bbar, x, y, 20.0, regularized );\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract -= 1;\n\t\t\t\t}\n\t\t\t\tfract = betaSmallBLargeASeries( a + 20.0, bbar, x, y, fract, 1, regularized ); // eslint-disable-line max-len\n\t\t\t\tif ( upper ) {\n\t\t\t\t\tfract = -fract;\n\t\t\t\t\tupper = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfract = ibetaFraction2( a, b, x, y, regularized, out );\n\t\t\t}\n\t\t} else {\n\t\t\tfract = ibetaFraction2( a, b, x, y, regularized, out );\n\t\t}\n\t}\n\tif ( out[ i1 ] < 0.0 ) {\n\t\tout[ i1 ] = ibetaPowerTerms( a, b, x, y, true );\n\t}\n\tdiv = y * x;\n\tif ( out[ i1 ] !== 0.0 ) {\n\t\tif ( ( MAX_FLOAT64 * div < out[ i1 ] ) ) {\n\t\t\t// Overflow, return an arbitrarily large value:\n\t\t\tout[ i1 ] = MAX_FLOAT64 / 2.0;\n\t\t} else {\n\t\t\tout[ i1 ] /= div;\n\t\t}\n\t}\n\tout[ i0 ] = ( upper ) ? ( ( regularized ) ? 1.0 : beta( a, b ) ) - fract : fract; // eslint-disable-line max-len\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ibetaImp;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar compute = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Evaluates the incomplete beta function and its first derivative.\n*\n* @param {Probability} x - function input\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {boolean} regularized - boolean indicating if the function should evaluate the regularized boolean beta function\n* @param {boolean} upper - boolean indicating if the function should return the upper tail of the incomplete beta function instead\n* @returns {Array} function value and first derivative\n*\n* @example\n* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );\n* // returns [ ~0.083, ~1.5 ]\n*\n* @example\n* var out = kernelBetainc( 0.2, 1.0, 2.0, true, false );\n* // returns [ 0.36, 1.6 ]\n*/\nfunction kernelBetainc( x, a, b, regularized, upper ) {\n\treturn compute( x, a, b, regularized, upper, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = kernelBetainc;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the incomplete beta function and its first derivative.\n*\n* @module @stdlib/math-base-special-kernel-betainc\n*\n* @example\n* var kernelBetainc = require( '@stdlib/math-base-special-kernel-betainc' );\n*\n* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );\n* // returns [ ~0.083, ~1.5 ]\n*\n* out = kernelBetainc( 0.2, 1.0, 2.0, true, false );\n* // returns [ 0.36, 1.6 ]\n*\n* @example\n* var kernelBetainc = require( '@stdlib/math-base-special-kernel-betainc' );\n*\n* var arr = [ 0.0, 0.0 ];\n* var out = kernelBetainc.assign( 0.2, 1.0, 2.0, true, true, arr, 1, 0 );\n* // returns [ 0.64, 1.6 ]\n*\n* var bool = ( arr === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_full_igamma_prefix", "__commonJSMin", "exports", "module", "exp", "pow", "ln", "MAX_LN", "MIN_LN", "fullIGammaPrefix", "a", "z", "prefix", "alz", "require_regularized_gamma_prefix", "__commonJSMin", "exports", "module", "lanczosSumExpGScaled", "gammaln", "gamma", "log1p", "sqrt", "abs", "exp", "pow", "max", "min", "ln", "MAX_LN", "MIN_LN", "G", "E", "regularizedGammaPrefix", "a", "z", "prefix", "amza", "agh", "alz", "amz", "sq", "d", "require_beta_small_b_large_a_series", "__commonJSMin", "exports", "module", "gammaDeltaRatio", "factorial", "gammainc", "log1p", "abs", "pow", "ln", "MIN_VALUE", "EPSILON", "fullIGammaPrefix", "regularizedGammaPrefix", "p", "betaSmallBLargeASeries", "a", "b", "x", "y", "s0", "mult", "normalized", "prefix", "tmp1", "tnp1", "sum", "b2n", "bm1", "lx2", "lxp", "mbn", "lx", "t4", "h", "j", "m", "n", "r", "t", "u", "require_rising_factorial_ratio", "__commonJSMin", "exports", "module", "risingFactorialRatio", "a", "b", "k", "result", "i", "require_ibeta_power_terms", "__commonJSMin", "exports", "module", "lanczosSumExpGScaled", "maxabs", "minabs", "expm1", "log1p", "sqrt", "abs", "exp", "pow", "min", "ln", "MAX_LN", "MIN_LN", "G", "E", "ibetaPowerTerms", "a", "b", "x", "y", "normalized", "result", "smallA", "ratio", "agh", "bgh", "cgh", "l1", "l2", "l3", "p1", "b1", "b2", "c", "l", "require_ibeta_fraction2", "__commonJSMin", "exports", "module", "continuedFraction", "ibetaPowerTerms", "OPTS", "ibetaFraction2t", "a", "b", "x", "y", "m", "next", "denom", "aN", "bN", "ibetaFraction2", "normalized", "out", "result", "fract", "f", "require_binomial_ccdf", "__commonJSMin", "exports", "module", "binomcoef", "floor", "pow", "MIN_VALUE", "binomialCCDF", "n", "k", "x", "y", "startTerm", "result", "start", "term", "i", "require_ibeta_a_step", "__commonJSMin", "exports", "module", "ibetaPowerTerms", "ibetaAStep", "a", "b", "x", "y", "k", "normalized", "out", "prefix", "term", "sum", "i", "require_ibeta_series", "__commonJSMin", "exports", "module", "lanczosSumExpGScaled", "sumSeries", "log1p", "sqrt", "exp", "pow", "ln", "MIN_VALUE", "MAX_LN", "MIN_LN", "G", "E", "opts", "ibetaSeriesT", "a", "b", "x", "result", "poch", "n", "next", "r", "ibetaSeries", "s0", "normalized", "out", "y", "agh", "bgh", "cgh", "l1", "l2", "c", "s", "require_assign", "__commonJSMin", "exports", "module", "isnan", "expm1", "floor", "log1p", "asin", "beta", "sqrt", "exp", "pow", "max", "min", "MAX_FLOAT64", "MIN_FLOAT64", "MAX_INT32", "HALF_PI", "PI", "betaSmallBLargeASeries", "risingFactorialRatio", "ibetaPowerTerms", "ibetaFraction2", "binomialCCDF", "ibetaAStep", "ibetaSeries", "ONE_OVER_PI", "ibetaImp", "x", "a", "b", "regularized", "upper", "out", "stride", "offset", "lambda", "prefix", "fract", "bbar", "div", "tmp", "i0", "i1", "k", "n", "p", "y", "require_main", "__commonJSMin", "exports", "module", "compute", "kernelBetainc", "x", "a", "b", "regularized", "upper", "setReadOnly", "main", "assign"]
}
